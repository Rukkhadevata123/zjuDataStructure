#include "expression_evaluator.cpp"
#include <iostream>

int main() {
    // 测试表达式
    std::string testExpressions[] = {
        "3.5e2 + 4.7e-2 * -.5",         // 带小数点和指数的复杂表达式
        "-3.5e2 + 4 * -(2.5 + 5.5)",     // 前导负号和括号中的负号，带小数点和指数
        "3.5 + 4.7e-2 * -5 + (2 - 8) * 3",// 混合运算
        "3.5 + 4.7e-2 * -5 + (2 - 8) * 3 / 2", // 混合运算，带除法
        "3.5 + 4.7e-2 * -5 + (2 - 8) * 3 / 2 - 1", // 更复杂的混合运算
        "3.5 + 4.7e-2 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1", // 更复杂的混合运算，带指数
        "3.5 + 4.7e-2 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1 - 7e2", // 更复杂的混合运算，带正负指数
        "3.5 + 4.7e-2 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1 - 7e2 + 8e-3", // 更复杂的混合运算，带多个指数
        "3.5 + 4.7e-2 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1 - 7e2 + 8e-3 - 9e3", // 更复杂的混合运算，带多个正负指数
        "3.5 + 4.7e-2 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1 - 7e2 + 8e-3 - 9e3 + 10e-3", // 更复杂的混合运算，带多个正负指数和小数点
        "3.5e-2 + 4.7e-3 * -5.5e-1",     // 带小数点和指数的复杂表达式，指数较小
        "-3.5e-2 + 4 * -(2.5e-1 + 5.5e-2)", // 前导负号和括号中的负号，带小数点和指数，指数较小
        "3.5 + 4.7e-3 * -5 + (2 - 8) * 3", // 混合运算，指数较小
        "3.5 + 4.7e-3 * -5 + (2 - 8) * 3 / 2", // 混合运算，带除法，指数较小
        "3.5 + 4.7e-3 * -5 + (2 - 8) * 3 / 2 - 1", // 更复杂的混合运算，指数较小
        "3.5 + 4.7e-3 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1", // 更复杂的混合运算，带指数，指数较小
        "3.5 + 4.7e-3 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1 - 7e2", // 更复杂的混合运算，带正负指数，指数较小
        "3.5 + 4.7e-3 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1 - 7e2 + 8e-3", // 更复杂的混合运算，带多个指数，指数较小
        "3.5 + 4.7e-3 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1 - 7e2 + 8e-3 - 9e3", // 更复杂的混合运算，带多个正负指数，指数较小
        "3.5 + 4.7e-3 * -5 + (2 - 8) * 3 / 2 - 1 + 6e-1 - 7e2 + 8e-3 - 9e3 + 10e-3", // 更复杂的混合运算，带多个正负指数和小数点，指数较小
    };

    std::string testExpressions_2[] = {
        "3.5 + 4.7e2 * +-.123 + (2 - -8) * 3",                // 带小数点指数和负数的小数，使用正号和负号
        "-3.5e-2 + 4 * -+-(2.5 + 5.5)",                       // 前导负号和括号中的负号，带指数，包含混合的正负号
        "+3.5e2 + +4.7e-2 * --5.5 + (+.123 - -8) * -3",       // 使用正号和负号，带小数点指数和小数点
        "+3.5 + -4.7e2 * -5 + (2 - -8) * +3 / -2 - +1",       // 混合运算，指数为正，包含正号和负号
        "-3.5e2 + +4.7e-2 * -+-0.123 + (2 - 8) * 3 / 2 - +1 + 6e2", // 混合运算，正负指数，包含正号
        "3.5e2 + 4.7e-2 * -.123 + +(2 - -8) * +3 / -2 - +1 + +6e-2", // 指数为负，包含正负号和.123
        "+3.5 + -4.7e2 * -5.5 + +(2 - 8) * -3 / 2 + +8e-2",   // 混合指数，包含正负和小数点，包含正负号
        "--3.5 + +4 * -+-(2.5e-2 + .123)",                    // 括号中的负号，指数为负和小数点，包含混合正负号
        "++3.5 + -4.7e2 * -.5 + +2e2 / 4 - .123e-2",          // 组合e和负数的小数，包含正号
        "+3.5 * (4.7e2 - +3e2 / +(2e-2 + .5))"                // 嵌套括号，指数和小数，包含正号
    };


    for (const std::string& expr : testExpressions_2) {
        try {
            std::string processed = ExpressionEvaluator::preprocessExpression(expr);
            std::cout << "原始表达式: " << expr << "\n";
            std::cout << "预处理后: " << processed << "\n";

            // 转换为后缀表达式
            std::string postfix = ExpressionEvaluator::infixToPostfix(processed);
            std::cout << "后缀表达式: " << postfix << "\n";

            // 计算后缀表达式的值
            double result = ExpressionEvaluator::evaluatePostfix(postfix);
            std::cout << "计算结果: " << result << "\n\n";
        } catch (const std::exception& e) {
            std::cout << "表达式: " << expr << " 无效: " << e.what() << "\n\n";
        }
    }

    return 0;
}